#!/usr/bin/python3

import sys, glob
import collections
import configparser
import json
import sys, glob, time

from mcpi_e.block import *

from Different.Relative import Relative
from Different.Used import Used
from Different.Flume import Flume
from mcpi_e.minecraft import Minecraft
from mcpi_e.connection import Connection, RequestError
from ObjectLib.GroundedQR import GroundedQR

collections.Iterable = collections.abc.Iterable  # to prevent "AttributeError: module 'collections' has no attribute 'Iterable'"

if sys.argv[1] is None:
    sys.exit(255)


def connect_to_mc():
    configParser = configparser.RawConfigParser()
    configParser.read('myConf.ini')
    return Minecraft.create(address=str(configParser['main']['ip']), port=int(configParser['main']['port']), playerName=str(configParser['main']['playerName']))

def get_undo_list():
    file_list = glob.glob(Used.path_to_store + '/*.bin')
    file_list.sort(reverse=True)
    return file_list

match sys.argv[1]:
    case 'undolist':
        files = get_undo_list()
        if 0 == len(files):
            print('Undo history is empty.')
            exit(0)
        for idx in range(len(files)-1, -1, -1):
            print('[%d] - %s' % (idx, files[idx]))

    case 'undo':
        files = get_undo_list()
        if 0 == len(files):
            print('Undo history is empty.')
            exit(0)
        idx = 0 if len(sys.argv) < 3 else int(sys.argv[2])
        print('Using file #%i - %s' % (idx, files[idx]))
        flume = Flume(connect_to_mc())
        flume.set_raw_data(Used.raise_data(files[idx]))
        flume.flush_to_mc_yxz()

    case 'getPos':
        mc = connect_to_mc()
        while True:
            pos = mc.player.getTilePos()
            rot = mc.player.getRotation()
            print(pos, rot)
            data = input("Press enter:\n")

    case 'info':
        configParser = configparser.RawConfigParser()
        configParser.read('myConf.ini')
        con = Connection(str(configParser['main']['ip']), int(configParser['main']['port']))
        try:
            ids = con.sendReceive(b"world.getPlayerIds")
            info = list(map(int, ids.split("|")))
        except RequestError as e:
            info=[]
        x = {
          "usersCount": info.__len__(),
        }

        print(json.dumps(x))

    case 'groundedQr':
        GroundedQR(connect_to_mc()).draw(sys.argv[2])

    case 'test':
        mc=connect_to_mc()
        position = Relative(mc.player.getTilePos(), mc.player.getRotation())


    case _:
        package = "Scenario"
        name = sys.argv[1]

        module = getattr(__import__(package, fromlist=[name]), name)
        command = vars(module)[name]
        print(command)
        mc = connect_to_mc()
        cmd = command(mc)
        cmd.exec()
        Used.store()
